#include <Wire.h>
#include <MPU6050.h>
#include <arduinoFFT.h>

#define FFT_N 512 // Número de amostras (deve ser uma potência de 2)
#define SAMPLING_FREQ 1000.0 // Hz (deve ser um double)
#define TOTAL_TIME (FFT_N / SAMPLING_FREQ)

MPU6050 mpu;
double vReal[FFT_N], vImag[FFT_N];

// Criando objeto da classe ArduinoFFT
ArduinoFFT FFT = ArduinoFFT(vReal, vImag, FFT_N, SAMPLING_FREQ, false);

int16_t accelX, accelY, accelZ;

void setup() {
    Serial.begin(115200);
    Wire.begin();
    mpu.initialize();
    if (mpu.testConnection()) {
        Serial.println("MPU6050 conectado com sucesso");
    } else {
        Serial.println("Falha na conexão com o MPU6050");
    }
}

void loop() {
    // Coleta de amostras
    for (int i = 0; i < FFT_N; i++) {
        mpu.getAcceleration(&accelX, &accelY, &accelZ);
        vReal[i] = (double)accelX; // Use o eixo desejado
        vImag[i] = 0; // Parte imaginária
        delay(1); // Ajuste se necessário
    }
    double sum = 0.0;
    for (int i = 0; i < FFT_N; i++) {
        sum += vReal[i];
    }
    double dc_component = sum / FFT_N; // Média das amostras
    // Janela Hamming
    FFT.windowing(vReal, FFT_N, FFT_WIN_TYP_HAMMING, FFT_FORWARD);

    // Computa a FFT
    FFT.compute(vReal, vImag, FFT_N, FFT_FORWARD);
    FFT.complexToMagnitude(vReal, vImag, FFT_N);

    // Encontra a frequência dominante
    double max_magnitude = 0.0;
    double fundamental_freq = 0.0;
    for (int k = 1; k < FFT_N / 2; k++) {
        double mag = sqrt(pow(vReal[k], 2) + pow(vImag[k], 2));
        double freq = (double)k * (SAMPLING_FREQ / FFT_N);
        if (mag > max_magnitude) {
            max_magnitude = mag;
            fundamental_freq = freq;
        }
    }
    
    // Imprime os valores de aceleração
    char print_buf[100];
    sprintf(print_buf, "AccelX: %.2f g\t AccelY: %.2f g\t AccelZ: %.2f g\n", 
            (accelX / 16384.0), (accelY / 16384.0), (accelZ / 16384.0));
    Serial.println(print_buf);

    // Imprime a frequência fundamental e a magnitude
    sprintf(print_buf, "Frequência Fundamental: %.2f Hz\t Magnitude: %.2f g\n", 
            fundamental_freq, (max_magnitude / 10000) * 2 / FFT_N);
    Serial.println(print_buf);

    // Imprime o componente DC
    sprintf(print_buf, "Componente DC: %.2f g\n", (dc_component / 16384.0));
    Serial.println(print_buf);

    delay(1000); // Aguarde um segundo antes da próxima coleta
}
